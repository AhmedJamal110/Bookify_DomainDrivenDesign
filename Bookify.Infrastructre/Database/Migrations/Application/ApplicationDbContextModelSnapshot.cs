// <auto-generated />
using System;
using Bookify.Infrastructre.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookify.Infrastructre.Database.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Application")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookify.Domain.Apartments.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string>("Amenities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("amenities");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastBookedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastBookedOnUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_apartments");

                    b.ToTable("apartments", "Application");
                });

            modelBuilder.Entity("Bookify.Domain.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ApaermentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("apaermentId");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("apartmentId");

                    b.Property<DateTime?>("CancelledOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("cancelledOnUtc");

                    b.Property<DateTime?>("CompeletedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("compeletedOnUtc");

                    b.Property<DateTime?>("ConfirmedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("confirmedOnUtc");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdOnUtc");

                    b.Property<DateTime?>("RefectedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("refectedOnUtc");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_bookings");

                    b.HasIndex("ApaermentId")
                        .HasDatabaseName("iX_bookings_apaermentId");

                    b.HasIndex("ApartmentId")
                        .HasDatabaseName("iX_bookings_apartmentId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_bookings_userId");

                    b.ToTable("bookings", "Application");
                });

            modelBuilder.Entity("Bookify.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("lastName");

                    b.HasKey("Id")
                        .HasName("pK_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("iX_users_email");

                    b.ToTable("users", "Application");
                });

            modelBuilder.Entity("Bookify.Domain.Apartments.Apartment", b =>
                {
                    b.OwnsOne("Bookify.Domain.Apartments.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ApartmentId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("address_ZipCode");

                            b1.HasKey("ApartmentId");

                            b1.ToTable("apartments", "Application");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId")
                                .HasConstraintName("fK_apartments_apartments_id");
                        });

                    b.OwnsOne("Bookify.Domain.Apartments.Money", "CleaningFee", b1 =>
                        {
                            b1.Property<Guid>("ApartmentId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("cleaningFee_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("cleaningFee_Currency");

                            b1.HasKey("ApartmentId");

                            b1.ToTable("apartments", "Application");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId")
                                .HasConstraintName("fK_apartments_apartments_id");
                        });

                    b.OwnsOne("Bookify.Domain.Apartments.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ApartmentId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("price_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("price_Currency");

                            b1.HasKey("ApartmentId");

                            b1.ToTable("apartments", "Application");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId")
                                .HasConstraintName("fK_apartments_apartments_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CleaningFee")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Bookify.Domain.Bookings.Booking", b =>
                {
                    b.HasOne("Bookify.Domain.Apartments.Apartment", null)
                        .WithMany()
                        .HasForeignKey("ApaermentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fK_bookings_apartments_apaermentId");

                    b.HasOne("Bookify.Domain.Apartments.Apartment", null)
                        .WithMany("Bookings")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fK_bookings_apartments_apartmentId");

                    b.HasOne("Bookify.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fK_bookings_users_userId");

                    b.OwnsOne("Bookify.Domain.Apartments.Money", "AmenitiesUpCharge", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("amenitiesUpCharge_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("amenitiesUpCharge_Currency");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings", "Application");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fK_bookings_bookings_id");
                        });

                    b.OwnsOne("Bookify.Domain.Apartments.Money", "CleaningFee", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("cleaningFee_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("cleaningFee_Currency");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings", "Application");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fK_bookings_bookings_id");
                        });

                    b.OwnsOne("Bookify.Domain.Apartments.Money", "PriceForPeriod", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("priceForPeriod_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("priceForPeriod_Currency");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings", "Application");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fK_bookings_bookings_id");
                        });

                    b.OwnsOne("Bookify.Domain.Apartments.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("totalPrice_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("totalPrice_Currency");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings", "Application");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fK_bookings_bookings_id");
                        });

                    b.OwnsOne("Bookify.Domain.Bookings.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date")
                                .HasColumnName("duration_End");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date")
                                .HasColumnName("duration_Start");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings", "Application");

                            b1.WithOwner()
                                .HasForeignKey("BookingId")
                                .HasConstraintName("fK_bookings_bookings_id");
                        });

                    b.Navigation("AmenitiesUpCharge")
                        .IsRequired();

                    b.Navigation("CleaningFee")
                        .IsRequired();

                    b.Navigation("Duration")
                        .IsRequired();

                    b.Navigation("PriceForPeriod")
                        .IsRequired();

                    b.Navigation("TotalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Bookify.Domain.Apartments.Apartment", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
